#pragma once

#include <stdint.h>

namespace std {
struct true_type {
	enum { value = true };
};
struct false_type {
	enum { value = false };
};

template <class T> struct is_integral : public false_type {};
template <class T> struct is_integral<const T> : public is_integral<T> {};
template <class T> struct is_integral<volatile const T> : public is_integral<T>{};
template <class T> struct is_integral<volatile T> : public is_integral<T>{};

//* is a type T an [cv-qualified-] integral type described in the standard (3.9.1p3)
// as an extension we include long long, as this is likely to be added to the
// standard at a later date
template<> struct is_integral<unsigned char> : public true_type {};
template<> struct is_integral<unsigned short> : public true_type{};
template<> struct is_integral<unsigned int> : public true_type{};
template<> struct is_integral<unsigned long> : public true_type{};

template<> struct is_integral<signed char> : public true_type{};
template<> struct is_integral<short> : public true_type{};
template<> struct is_integral<int> : public true_type{};
template<> struct is_integral<long> : public true_type{};

template<> struct is_integral<char> : public true_type{};
template<> struct is_integral<bool> : public true_type{};

#ifdef UINT64_MAX
	template<> struct is_integral<uint64_t> : public true_type{};
	template<> struct is_integral<int64_t> : public true_type{};
#endif

template<bool isEnableArg, class TArg> struct enable_if;
template<class TArg> struct enable_if<true, TArg> {
	typedef TArg type;
};

template<bool isEnableArg, class TArg, class FArg> struct conditional;
template<class TArg, class FArg> struct conditional<true, TArg, FArg> {
	typedef TArg type;
};
template<class TArg, class FArg> struct conditional<false, TArg, FArg> {
	typedef FArg type;
};
	
} //# namespace std
