/*
	Copyright 2022 Bga <bga.email@gmail.com>

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

#pragma once

#include <bit>

#include <!cpp/common.h>

namespace std {
	#ifndef __cpp_lib_endian 
	#define __cpp_lib_endian
	namespace endian {
		enum {
			#ifdef _WIN32
				little = 0,
				big    = 1,
				native = little
			#else
				little = __ORDER_LITTLE_ENDIAN__,
				big    = __ORDER_BIG_ENDIAN__,
				native = __BYTE_ORDER__
			#endif
		};
	}
	#endif

	#ifndef __cpp_lib_byteswap
	#define __cpp_lib_byteswap
	inline BGA__MAYBE_CONSTEXPR I8 byteswap(I8 v) /* noexcept */ {
		return v;
	}
	inline BGA__MAYBE_CONSTEXPR U8 byteswap(U8 v) /* noexcept */ {
		return v;
	}
	//# FIXME asm { swapw x } for stm8
	inline BGA__MAYBE_CONSTEXPR U16 byteswap(U16 v) /* noexcept */ {
		return U16(U16(U8(v)) << 8) | U16(U8(v >> 8));
	}
	inline BGA__MAYBE_CONSTEXPR I16 byteswap(I16 v) /* noexcept */ {
		return I16(byteswap(U16(v)));
	}
	inline BGA__MAYBE_CONSTEXPR U32 byteswap(U32 v) /* noexcept */ {
		return (U32(byteswap(U16(v >> 0))) << 16) | (U32(byteswap(U16(v >> 16))) << 0); 
	}
	inline BGA__MAYBE_CONSTEXPR I32 byteswap(I32 v) /* noexcept */ {
		return I32(byteswap(U32(v)));
	}
	#ifdef UINT64_MAX
	inline BGA__MAYBE_CONSTEXPR U64 byteswap(U64 v) /* noexcept */ {
		return (U64(byteswap(U32(v >> 0))) << 32) | (U64(byteswap(U32(v >> 32))) << 0); 
	}
	inline BGA__MAYBE_CONSTEXPR I64 byteswap(I64 v) /* noexcept */ {
		return I64(byteswap(U64(v)));
	}
	#endif
	#endif
} //# namespace

#ifndef __cpp_lib_bitops
	#define __cpp_lib_bitops
	
	namespace std {
		template<class IntArg>
		/* [[nodiscard]] */ BGA__MAYBE_CONSTEXPR IntArg rotl(IntArg x, int s) /* noexcept */ {
			if(s < 0) {
				return IntArg(x >> -s) | IntArg(x << (::Bga::int_type_traits<IntArg>::bit_width + s));
			}
			else {
				return IntArg(x <<  s) | IntArg(x >> (::Bga::int_type_traits<IntArg>::bit_width - s));
			}
		}
		template<class IntArg>
		/* [[nodiscard]] */ BGA__MAYBE_CONSTEXPR IntArg rotr(IntArg x, int s) /* noexcept */ {
			return rotl(x, -s);
		}

	} //# namespace

	#if defined(__x86_64__) || defined(__i386__)
		#ifdef _MSC_VER
			#include <intrin.h>
		#else
			#include <x86intrin.h>  // Not just <immintrin.h> for compilers other than icc
		#endif

		namespace std {
		template<>
		/* [[nodiscard]] */ BGA__MAYBE_CONSTEXPR UInt rotl(UInt x, int s) /* noexcept */ {
			return _rotl(x, s);  // gcc, icc, msvc.  Intel-defined.
		}
		template<>
		/* [[nodiscard]] */ BGA__MAYBE_CONSTEXPR UInt rotr(UInt x, int s) /* noexcept */ {
			return _rotr(x, s);  // gcc, icc, msvc.  Intel-defined.
		}

		#ifdef UINT64_MAX
			/* [[nodiscard]] */ BGA__MAYBE_CONSTEXPR U64 rotl(U64 x, int s) /* noexcept */ {
				return _rotl64(x, s);  // gcc, icc, msvc.  Intel-defined.
			}
			/* [[nodiscard]] */ BGA__MAYBE_CONSTEXPR U64 rotr(U64 x, int s) /* noexcept */ {
				return _rotr64(v, n);  // gcc, icc, msvc.  Intel-defined.
			}
		#endif

		} //# namespace

	#endif

#endif
